// app/api/share/route.ts

import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

export async function POST(req: NextRequest) {
  try {
    const { summary, recipients } = await req.json();

    if (!summary || !recipients) {
      return NextResponse.json({ error: 'Summary and recipients are required.' }, { status: 400 });
    }

    // Check if environment variables are set
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.error('Missing email environment variables:', {
        EMAIL_USER: !!process.env.EMAIL_USER,
        EMAIL_PASS: !!process.env.EMAIL_PASS
      });
      return NextResponse.json({ 
        error: 'Email configuration is missing. Please check your .env.local file.' 
      }, { status: 500 });
    }

    console.log('Creating email transporter with:', {
      service: 'gmail',
      user: process.env.EMAIL_USER,
      passSet: !!process.env.EMAIL_PASS
    });

    // Create transporter - Fixed the function name
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // Verify transporter configuration
    try {
      await transporter.verify();
      console.log('Email transporter verified successfully');
    } catch (verifyError) {
      console.error('Email transporter verification failed:', verifyError);
      return NextResponse.json({ 
        error: `Email configuration error: ${verifyError instanceof Error ? verifyError.message : 'Unknown error'}` 
      }, { status: 500 });
    }

    // Parse recipients (comma-separated emails)
    const recipientEmails = recipients.split(',').map((email: string) => email.trim());
    console.log('Sending email to recipients:', recipientEmails);

    // Email options
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipientEmails.join(', '),
      subject: 'Meeting Summary',
      html: `
        <h2>Meeting Summary</h2>
        <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6;">
          ${summary}
        </div>
        <hr>
        <p style="color: #666; font-size: 12px;">
          This summary was generated by AI Meeting Summarizer
        </p>
      `,
    };

    console.log('Sending email with options:', {
      from: mailOptions.from,
      to: mailOptions.to,
      subject: mailOptions.subject,
      summaryLength: summary.length
    });

    // Send email
    const result = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', result);

    return NextResponse.json({ 
      message: `Summary sent successfully to ${recipientEmails.length} recipient(s)!` 
    });
  } catch (error) {
    console.error('Error sending email:', error);
    
    // Provide more specific error messages
    let errorMessage = 'Failed to send email. Please check your email configuration.';
    
    if (error instanceof Error) {
      if (error.message.includes('Invalid login')) {
        errorMessage = 'Email authentication failed. Please check your email and app password.';
      } else if (error.message.includes('Connection timeout')) {
        errorMessage = 'Connection timeout. Please check your internet connection.';
      } else if (error.message.includes('ENOTFOUND')) {
        errorMessage = 'Email service not found. Please check your email configuration.';
      } else {
        errorMessage = `Email error: ${error.message}`;
      }
    }
    
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}